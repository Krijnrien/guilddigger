// Code generated by protoc-gen-go. DO NOT EDIT.
// source: item.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ItemIds struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemIds) Reset()         { *m = ItemIds{} }
func (m *ItemIds) String() string { return proto.CompactTextString(m) }
func (*ItemIds) ProtoMessage()    {}
func (*ItemIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_6007f868cf6553df, []int{0}
}

func (m *ItemIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemIds.Unmarshal(m, b)
}
func (m *ItemIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemIds.Marshal(b, m, deterministic)
}
func (m *ItemIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemIds.Merge(m, src)
}
func (m *ItemIds) XXX_Size() int {
	return xxx_messageInfo_ItemIds.Size(m)
}
func (m *ItemIds) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemIds.DiscardUnknown(m)
}

var xxx_messageInfo_ItemIds proto.InternalMessageInfo

func (m *ItemIds) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func init() {
	proto.RegisterType((*ItemIds)(nil), "main.ItemIds")
}

func init() { proto.RegisterFile("item.proto", fileDescriptor_6007f868cf6553df) }

var fileDescriptor_6007f868cf6553df = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x2c, 0x49, 0xcd,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x93, 0x92, 0x4e, 0xcf,
	0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x25, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54,
	0x42, 0x94, 0x28, 0x29, 0x71, 0xb1, 0x7b, 0x96, 0xa4, 0xe6, 0x7a, 0xa6, 0x14, 0x0b, 0x89, 0x73,
	0xb1, 0x83, 0xf4, 0xc6, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x06, 0xb1, 0x65, 0x82,
	0x65, 0x8c, 0xdc, 0xb8, 0xb8, 0x41, 0x6a, 0x02, 0x8a, 0x52, 0x8b, 0x53, 0xf3, 0x4a, 0x84, 0xcc,
	0xb9, 0xb8, 0xdc, 0x53, 0x4b, 0x60, 0xba, 0xc4, 0xf4, 0x20, 0xc6, 0xeb, 0xc1, 0x8c, 0xd7, 0x73,
	0x05, 0x19, 0x2f, 0xc5, 0xab, 0x07, 0xb2, 0x5c, 0x0f, 0xaa, 0x4c, 0x89, 0xc1, 0x80, 0x31, 0x89,
	0x0d, 0xac, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x2f, 0x07, 0x2a, 0xa3, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ItemPresentClient is the client API for ItemPresent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ItemPresentClient interface {
	// Get all events for the given aggregate and event
	GetItemIds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ItemPresent_GetItemIdsClient, error)
}

type itemPresentClient struct {
	cc *grpc.ClientConn
}

func NewItemPresentClient(cc *grpc.ClientConn) ItemPresentClient {
	return &itemPresentClient{cc}
}

func (c *itemPresentClient) GetItemIds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ItemPresent_GetItemIdsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ItemPresent_serviceDesc.Streams[0], "/main.ItemPresent/GetItemIds", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemPresentGetItemIdsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ItemPresent_GetItemIdsClient interface {
	Recv() (*ItemIds, error)
	grpc.ClientStream
}

type itemPresentGetItemIdsClient struct {
	grpc.ClientStream
}

func (x *itemPresentGetItemIdsClient) Recv() (*ItemIds, error) {
	m := new(ItemIds)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemPresentServer is the server API for ItemPresent service.
type ItemPresentServer interface {
	// Get all events for the given aggregate and event
	GetItemIds(*empty.Empty, ItemPresent_GetItemIdsServer) error
}

// UnimplementedItemPresentServer can be embedded to have forward compatible implementations.
type UnimplementedItemPresentServer struct {
}

func (*UnimplementedItemPresentServer) GetItemIds(req *empty.Empty, srv ItemPresent_GetItemIdsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItemIds not implemented")
}

func RegisterItemPresentServer(s *grpc.Server, srv ItemPresentServer) {
	s.RegisterService(&_ItemPresent_serviceDesc, srv)
}

func _ItemPresent_GetItemIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemPresentServer).GetItemIds(m, &itemPresentGetItemIdsServer{stream})
}

type ItemPresent_GetItemIdsServer interface {
	Send(*ItemIds) error
	grpc.ServerStream
}

type itemPresentGetItemIdsServer struct {
	grpc.ServerStream
}

func (x *itemPresentGetItemIdsServer) Send(m *ItemIds) error {
	return x.ServerStream.SendMsg(m)
}

var _ItemPresent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.ItemPresent",
	HandlerType: (*ItemPresentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItemIds",
			Handler:       _ItemPresent_GetItemIds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "item.proto",
}
